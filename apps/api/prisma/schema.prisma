// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id    String  @id @default(cuid())
  name  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  people PersonOrganization[]
  users  User[]
  
  @@map("organizations")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  phone     String?
  role      String? // ADMIN, DOCTOR, NURSE, etc.
  timezone  String  @default("Africa/Douala")
  password  String
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  doctor         Doctor?
  auditLogs      AuditLog[]
  
  @@map("users")
}

model Doctor {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  speciality String?
  license   String?
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  consultations Consultation[]
  interventions Intervention[]
  
  @@map("doctors")
}

model Person {
  id        String  @id @default(cuid())
  fullName  String
  birthdate DateTime?
  phone     String?
  email     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organizations   PersonOrganization[]
  consultations   Consultation[]
  interventions   Intervention[]
  
  @@map("people")
}

model PersonOrganization {
  personId String
  orgId    String
  startAt  DateTime @default(now())
  endAt    DateTime?
  role     String?
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  person Person       @relation(fields: [personId], references: [id], onDelete: Cascade)
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  @@id([personId, orgId])
  @@map("person_organizations")
}

model Consultation {
  id          String   @id @default(cuid())
  personId    String
  doctorId    String
  dateTimeUtc DateTime
  notes       String?
  attachments String? // JSON string: URLs des fichiers joints
  status      String   @default("COMPLETED") // SCHEDULED, COMPLETED, CANCELLED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  person Person @relation(fields: [personId], references: [id])
  doctor Doctor @relation(fields: [doctorId], references: [id])
  
  @@index([doctorId, dateTimeUtc])
  @@index([personId])
  @@map("consultations")
}

model Intervention {
  id             String   @id @default(cuid())
  personId       String
  doctorId       String
  title          String
  description    String?
  scheduledAtUtc DateTime
  priority       String   @default("NORMAL") // NORMAL, URGENT
  status         String   @default("PLANNED") // PLANNED, IN_PROGRESS, DONE, CANCELED
  location       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  person    Person        @relation(fields: [personId], references: [id])
  doctor    Doctor        @relation(fields: [doctorId], references: [id])
  reminders Reminder[]
  rules     ReminderRule[]
  
  @@index([doctorId, status])
  @@index([scheduledAtUtc])
  @@index([personId])
  @@map("interventions")
}

model ReminderRule {
  id             String @id @default(cuid())
  interventionId String
  offsetMinutes  Int    // e.g. -1440 (J-1), -60 (H-1)
  channel        String // EMAIL, SMS, PUSH
  enabled        Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  intervention Intervention @relation(fields: [interventionId], references: [id], onDelete: Cascade)
  
  @@map("reminder_rules")
}

model Reminder {
  id               String   @id @default(cuid())
  interventionId   String
  type             String   // EMAIL, SMS, PUSH
  plannedSendUtc   DateTime
  message          String?
  recipient        String?  // email, phone, device token
  status           String   @default("PENDING") // PENDING, SENT, FAILED, CANCELLED
  lastError        String?
  idempotencyKey   String   @unique
  sentAt           DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  intervention    Intervention     @relation(fields: [interventionId], references: [id], onDelete: Cascade)
  notificationLogs NotificationLog[]
  
  @@index([status, plannedSendUtc])
  @@index([interventionId])
  @@index([idempotencyKey])
  @@map("reminders")
}

model NotificationLog {
  id             String  @id @default(cuid())
  reminderId     String?
  channel        String  // EMAIL, SMS, PUSH
  to             String  // email, phone, device token
  payload        String? // JSON du message envoy√©
  status         String  // SENT, FAILED, DELIVERED, READ
  providerMsgId  String? // ID du message du provider (Twilio, SendGrid, etc.)
  error          String?
  deliveredAt    DateTime?
  readAt         DateTime?
  createdAt      DateTime @default(now())
  
  // Relations
  reminder Reminder? @relation(fields: [reminderId], references: [id], onDelete: SetNull)
  
  @@index([reminderId])
  @@index([status, createdAt])
  @@map("notification_logs")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // CREATE, UPDATE, DELETE, VIEW
  entity    String   // User, Person, Intervention, etc.
  entityId  String
  diff      String?  // JSON des changements
  ipAddress String?
  userAgent String?
  atUtc     DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

